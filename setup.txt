# Google Colab Notebook
-> when exploring and visualising a dataset, the Python notebook format is better suited.
-> open google colab notebook through your goole drive.
-> find the Python notebook under: New -> More -> Google Colaboratory
-> if we want to run everything locally, then install "Anaconda" and use the bundled jupyter notebook instead
-> Google Colab is an online version of Jupyter

# How to use python notebook? 
-> the notebook is divided into cells
-> each cell can be executed individually and the result is automatically printed out.
-> to execute a cell use the shortcut: "Shift + Enter"
-> bring up the auto completion by using: "Ctrl + Space" 

# Missing value and junk data
-> Before we can proceed with our analysis we should try and figure out if there are any missing or junk data
   in our dataframe. That way we can avoid problems later on
-> NAN values are blank cells or cells that contain strings instead of numbers. Look for the NaN(Not a Number)
   values in the dataframe.
-> Use the ".isna()" method to identify NaN 

# groupby() method
-> often times we will want to sum rows that belongs to a particular category.for example which category of 
   degrees has the highest average salary? Is it STEM, Business or HASS?
-> ".groupby()" method allows us to manipulate data similar to a Microsoft Excel Pivot Table

# Things to know
-> use .head(), .tail(), .shape(), .columns to explore dataframe and find out the number of rows and columns
   as well as the columns names.
-> look for NaN(not a number) values with .findna() and consider using .dropna() to clean up dataframe
-> access entire columns of a dataframe using the square bracket notation: df['column name']
   or df['column name 1', 'column name 2', 'column name 3']
-> access the individual cells in the dataframe by changing square brackets: df['column name'][index] or using
   df['column name'].loc[index]
-> largest and smallest value as well as their positions can be found with methods like .max(), .min(),
   .idmax(), .idmin()
-> sort the dataframe with .sort_values() and add new columns with .insert()
-> to create excel type pivot table by grouping entries that belongs to a particular category use the .groupby()
   method
